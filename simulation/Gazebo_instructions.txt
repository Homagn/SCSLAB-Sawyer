#######LAUNCHING GAZEBO##########
(start roscore in a terminal, in a new terminal source devel/setup.bash, and then ...)
roslaunch gazebo_ros empty_world.launch



#######LOADING MODELS############
rosrun gazebo_ros spawn_model -file `pwd`/sawyer.urdf -urdf -z 1 -model robot1

OR

rosrun gazebo_ros spawn_model -file sawyer_robot-master/sawyer_description/urdf/sawyer1.urdf -urdf -z 1 -model robot 
(this is a modified urdf file with damping and friction added to the gazebo model so that the arms dont swing too much)



#######SET POSE AND ORIENTATION OF THE LOADED MODEL##########
rosservice call /gazebo/set_model_state '{model_state: { model_name: robot1, pose: { position: { x: 0, y: 0 ,z: 1 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'




#######GET PROPERTIES OF THE WORLD############
rosservice call gazebo/get_world_properties


#######GET LINK STATES#############
rostopic echo -n 1 /gazebo/link_states

##########APPLY JOINT EFFORT############
rosservice call gazebo/apply_joint_effort '{joint_name: right_j1, effort: 0.01, start_time: 10000000000, duration: 1000000000}'

or 

rosservice call /gazebo/apply_joint_effort "joint_name: 'right_j0'
effort: 10.0
start_time:
  secs: 1
  nsecs: 2
duration:
  secs: 5
  nsecs: 6"

############CLEAR JOINT EFFORTS#############
rosservice call /gazebo/clear_joint_forces '{joint_name: joint2}'


##########APPLY WRENCHES TO LINKS###########
rosservice call gazebo/apply_body_wrench '{body_name: "robot1::right_l0" , wrench: { torque: { x: -0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }'


###########PAUSING AND UNPAUSING PHYSICS##############
rosservice call gazebo/pause_physics
rosservice call gazebo/unpause_physics


#########PROGRAMMATICALLY PASS JOINT EFFORT MESSAGES TO GAZEBO USING PYTHON ################
first read this:
http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Creating_a_srv

then do this:

http://wiki.ros.org/ROS/Tutorials/WritingServiceClient%28python%29

TIP===> You can load the model in gazebo and simulate it using rosservice calls, on the other hand if a sensor script(for example a camera) is also written in the loaded urdf file, then the sensor messages will be available as rostopic echo. 


##############GENERATE URDF FROM SAWYER ROBOT AUTOMATICALLY################
after connecting and enabling robot
cd src
rosparam get -p /robot_description | tail -n +2 > sawyer_urdf.xml





